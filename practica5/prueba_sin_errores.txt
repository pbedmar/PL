principal ()
{
    inicio_var
        entero   ve ;
        flotante vf ;
        caracter vc ;
        booleano vl ;
        lista de entero     pe, pe2 ;
        lista de flotante   pf, pf2 ;
        lista de caracter   pc, pc2 ;
        lista de booleano   pl ;
    fin_var 

    procedimiento procedimientoA (entero a1, flotante a2, caracter a3) {
        inicio_var
            entero x1, x2 ;
        fin_var

        procedimiento procedimientoB (caracter b1, booleano b2) {
            inicio_var
                flotante xf, x2 ;
            fin_var

            procedimiento procedimientoC (booleano c1, entero c2) {
                inicio_var
                    flotante x1 ;
                fin_var

                x1 = 1.3 ;
                si (c2 > 10)
                    c2 = c2-1 ;
                en otro caso
                    x1 = 3.1 ;
            }

            procedimientoC(verdadero, 10) ;
            procedimientoC(falso, 1) ;
            procedimientoC(verdadero, 23) ;

            mientras (x2-xf<10.0)
                x2 = x2 * xf ;
        }

        procedimiento procedimientoD (flotante d1) {
            inicio_var
                caracter dato ;
                entero valor ;
            fin_var

            procedimiento procedimientoE (caracter e1, caracter e2) {
                leer e1, e2 ;
                si (e1=='a')
                    imprimir e1 ;
                en otro caso si (e1=='b')
                    imprimir e2 ;
                en otro caso
                    imprimir ' ' ;
            }

            leer valor ;
            si (d1 > 0.0) {
                inicio_var
                    entero dato ;
                fin_var

                dato = 2 ;
                dato = 5;
                dato = valor*20;
            } en otro caso {
                valor = valor*100;
                d1 = d1 / 1000.0 ;
            }
        }
        
        x1 = 1;
        x2 = 2;
    } 

    pe = pe++(-10)@(#pe) ;
    pf = pf++(-10.0)@(#pe) ;
    pc = pc++('#')@(#pe) ;

    si (((pe++(20)@(#pe))@(#pe-1)) == 20) {
        ve = (#pe-1) ;
        pe = pe--(#pe-1);
    }
    en otro caso {
        pe = pe * 5.0 ;
        pe = pe * (20/2000) ;
    }       
}